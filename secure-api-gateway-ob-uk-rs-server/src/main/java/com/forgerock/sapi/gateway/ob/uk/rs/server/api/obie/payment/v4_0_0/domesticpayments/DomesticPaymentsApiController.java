/*
 * Copyright Â© 2020-2024 ForgeRock AS (obst@forgerock.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */
package com.forgerock.sapi.gateway.ob.uk.rs.server.api.obie.payment.v4_0_0.domesticpayments;

import static com.forgerock.sapi.gateway.ob.uk.common.datamodel.common.FRSubmissionStatus.PENDING;
import static com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.common.FRAccountIdentifierConverter.toOBCashAccountDebtor4;
import static com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.common.FRChargeConverter.toOBWriteDomesticConsentResponse5DataCharges;
import static com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.common.FRSubmissionStatusConverter.toOBWriteDomesticResponse5DataStatus;
import static com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.payment.FRWriteDomesticConsentConverter.toOBWriteDomestic2DataInitiation;
import static com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.payment.FRWriteDomesticConverter.toFRWriteDomestic;
import static org.springframework.http.HttpStatus.BAD_REQUEST;
import static org.springframework.http.HttpStatus.CREATED;

import java.util.Date;
import java.util.Optional;
import java.util.UUID;

import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;

import com.forgerock.sapi.gateway.ob.uk.common.datamodel.common.FRResponseDataRefund;
import com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.common.FRPaymentDetailsStatusConverter;
import com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.common.FRResponseDataRefundConverter;
import com.forgerock.sapi.gateway.ob.uk.common.datamodel.converter.v4.payment.FRWriteDomesticConsentConverter;
import com.forgerock.sapi.gateway.ob.uk.common.datamodel.payment.FRWriteDataDomestic;
import com.forgerock.sapi.gateway.ob.uk.common.datamodel.payment.FRWriteDomestic;
import com.forgerock.sapi.gateway.ob.uk.common.error.OBErrorException;
import com.forgerock.sapi.gateway.ob.uk.common.error.OBErrorResponseException;
import com.forgerock.sapi.gateway.ob.uk.rs.obie.api.payment.v4_0_0.domesticpayments.DomesticPaymentsApi;
import com.forgerock.sapi.gateway.ob.uk.rs.server.api.obie.payment.services.RefundAccountService;
import com.forgerock.sapi.gateway.ob.uk.rs.server.common.util.PaymentApiResponseUtil;
import com.forgerock.sapi.gateway.ob.uk.rs.server.common.util.VersionPathExtractor;
import com.forgerock.sapi.gateway.ob.uk.rs.server.service.idempotency.IdempotentPaymentService;
import com.forgerock.sapi.gateway.ob.uk.rs.server.service.idempotency.SinglePaymentForConsentIdempotentPaymentService;
import com.forgerock.sapi.gateway.ob.uk.rs.server.v4.common.util.link.LinksHelper;
import com.forgerock.sapi.gateway.ob.uk.rs.server.validator.PaymentSubmissionValidator;
import com.forgerock.sapi.gateway.ob.uk.rs.server.validator.ResourceVersionValidator;
import com.forgerock.sapi.gateway.ob.uk.rs.validation.obie.OBValidationService;
import com.forgerock.sapi.gateway.ob.uk.rs.validation.obie.v4.payment.OBWriteDomestic2Validator.OBWriteDomestic2ValidationContext;
import com.forgerock.sapi.gateway.rcs.consent.store.client.payment.domestic.DomesticPaymentConsentStoreClient;
import com.forgerock.sapi.gateway.rcs.consent.store.datamodel.payment.ConsumePaymentConsentRequest;
import com.forgerock.sapi.gateway.rcs.consent.store.datamodel.payment.domestic.v3_1_10.DomesticPaymentConsent;
import com.forgerock.sapi.gateway.rs.resource.store.repo.entity.payment.FRDomesticPaymentSubmission;
import com.forgerock.sapi.gateway.rs.resource.store.repo.mongo.payments.DomesticPaymentSubmissionRepository;
import com.forgerock.sapi.gateway.uk.common.shared.api.meta.obie.OBVersion;

import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;
import uk.org.openbanking.datamodel.v4.common.Meta;
import uk.org.openbanking.datamodel.v4.payment.OBWriteDomestic2;
import uk.org.openbanking.datamodel.v4.payment.OBWriteDomesticResponse5;
import uk.org.openbanking.datamodel.v4.payment.OBWriteDomesticResponse5Data;
import uk.org.openbanking.datamodel.v4.payment.OBWritePaymentDetails1;
import uk.org.openbanking.datamodel.v4.payment.OBWritePaymentDetails1PaymentStatusStatus;
import uk.org.openbanking.datamodel.v4.payment.OBWritePaymentDetails1StatusDetail;
import uk.org.openbanking.datamodel.v4.payment.OBWritePaymentDetailsResponse1;
import uk.org.openbanking.datamodel.v4.payment.OBWritePaymentDetailsResponse1Data;

@Controller("DomesticPaymentsApiV4.0.0")
@Slf4j
public class DomesticPaymentsApiController implements DomesticPaymentsApi {

    private final Logger logger = LoggerFactory.getLogger(getClass());
    private final DomesticPaymentSubmissionRepository paymentSubmissionRepository;
    private final PaymentSubmissionValidator paymentSubmissionValidator;
    private final DomesticPaymentConsentStoreClient consentStoreClient;
    private final OBValidationService<OBWriteDomestic2ValidationContext> paymentValidator;
    private final RefundAccountService refundAccountService;
    private final IdempotentPaymentService<FRDomesticPaymentSubmission, FRWriteDomestic> idempotentPaymentService;

    public DomesticPaymentsApiController(DomesticPaymentSubmissionRepository paymentSubmissionRepository,
                                         PaymentSubmissionValidator paymentSubmissionValidator,
                                         OBValidationService<OBWriteDomestic2ValidationContext> paymentValidator,
                                         @Qualifier("v4.0.0RestDomesticPaymentConsentStoreClient") DomesticPaymentConsentStoreClient consentStoreClient,
                                         RefundAccountService refundAccountService) {
        this.paymentSubmissionRepository = paymentSubmissionRepository;
        this.paymentSubmissionValidator = paymentSubmissionValidator;
        this.paymentValidator = paymentValidator;
        this.consentStoreClient = consentStoreClient;
        this.refundAccountService = refundAccountService;
        this.idempotentPaymentService = new SinglePaymentForConsentIdempotentPaymentService<>(
                paymentSubmissionRepository);
    }

    @Override
    public ResponseEntity<OBWriteDomesticResponse5> createDomesticPayments(String authorization,
                                                                           String xIdempotencyKey,
                                                                           String xJwsSignature,
                                                                           OBWriteDomestic2 obWriteDomestic2,
                                                                           String xFapiAuthDate,
                                                                           String xFapiCustomerIpAddress,
                                                                           String xFapiInteractionId,
                                                                           String xCustomerUserAgent,
                                                                           String apiClientId,
                                                                           HttpServletRequest request)
            throws OBErrorResponseException, OBErrorException {
        logger.debug("Received payment submission: '{}'", obWriteDomestic2);

        paymentSubmissionValidator.validateIdempotencyKey(xIdempotencyKey);

        String consentId = obWriteDomestic2.getData().getConsentId();

        logger.debug("Attempting to get consent: {}, clientId: {}", consentId, apiClientId);
        final DomesticPaymentConsent consent = consentStoreClient.getConsent(consentId, apiClientId);
        logger.debug("Got consent from store: {}", consent);

        FRWriteDomestic frDomesticPayment = toFRWriteDomestic(obWriteDomestic2);
        logger.trace("Converted to: '{}'", frDomesticPayment);

        final Optional<FRDomesticPaymentSubmission> existingPayment =
                idempotentPaymentService.findExistingPayment(frDomesticPayment,
                                                             consentId,
                                                             apiClientId,
                                                             xIdempotencyKey);
        if (existingPayment.isPresent()) {
            logger.info(
                    "Payment submission is a replay of a previous payment, returning previously created payment for "
                            + "x-idempotencyKey: {}, consentId: {}",
                    xIdempotencyKey,
                    consentId);
            return ResponseEntity.status(CREATED).body(responseEntity(consent, existingPayment.get()));
        }

        // validate the consent against the request
        logger.debug("Validating Domestic Payment submission");
        final OBWriteDomestic2ValidationContext validationCtxt = new OBWriteDomestic2ValidationContext(obWriteDomestic2,
                                                                                                       FRWriteDomesticConsentConverter.toOBWriteDomesticConsent4(
                                                                                                               consent.getRequestObj()),
                                                                                                       consent.getStatus());
        paymentValidator.validate(validationCtxt);
        logger.debug("Domestic Payment validation successful");

        FRDomesticPaymentSubmission frPaymentSubmission = FRDomesticPaymentSubmission.builder()
                                                                                     .id(obWriteDomestic2.getData()
                                                                                                         .getConsentId())
                                                                                     .payment(frDomesticPayment)
                                                                                     .status(PENDING)
                                                                                     .created(new Date())
                                                                                     .updated(new Date())
                                                                                     .idempotencyKey(xIdempotencyKey)
                                                                                     .obVersion(VersionPathExtractor.getVersionFromPath(
                                                                                             request))
                                                                                     .build();

        frPaymentSubmission = idempotentPaymentService.savePayment(frPaymentSubmission);

        final ConsumePaymentConsentRequest consumePaymentRequest = new ConsumePaymentConsentRequest();
        consumePaymentRequest.setConsentId(consentId);
        consumePaymentRequest.setApiClientId(apiClientId);
        consentStoreClient.consumeConsent(consumePaymentRequest);


        return ResponseEntity.status(CREATED).body(responseEntity(consent, frPaymentSubmission));
    }

    @Override
    public ResponseEntity getDomesticPaymentsDomesticPaymentId(String domesticPaymentId, String authorization,
                                                               String xFapiAuthDate, String xFapiCustomerIpAddress,
                                                               String xFapiInteractionId, String xCustomerUserAgent,
                                                               String apiClientId, HttpServletRequest request) {

        Optional<FRDomesticPaymentSubmission> isPaymentSubmission = paymentSubmissionRepository.findById(
                domesticPaymentId);
        if (!isPaymentSubmission.isPresent()) {
            return ResponseEntity.status(BAD_REQUEST)
                                 .body("Payment submission '" + domesticPaymentId + "' can't be found");
        }
        FRDomesticPaymentSubmission frPaymentSubmission = isPaymentSubmission.get();

        OBVersion apiVersion = VersionPathExtractor.getVersionFromPath(request);
        if (!ResourceVersionValidator.isAccessToResourceAllowed(apiVersion, frPaymentSubmission.getObVersion())) {
            return PaymentApiResponseUtil.resourceConflictResponse(frPaymentSubmission, apiVersion);
        }

        final DomesticPaymentConsent consent = consentStoreClient.getConsent(frPaymentSubmission.getConsentId(),
                                                                             apiClientId);
        logger.debug("Got consent from store: {}", consent);

        return ResponseEntity.ok(responseEntity(consent, frPaymentSubmission));
    }

    @Override
    public ResponseEntity getDomesticPaymentsDomesticPaymentIdPaymentDetails(String domesticPaymentId,
                                                                             String authorization,
                                                                             String xFapiAuthDate,
                                                                             String xFapiCustomerIpAddress,
                                                                             String xFapiInteractionId,
                                                                             String xCustomerUserAgent,
                                                                             String apiClientId,
                                                                             HttpServletRequest request) {
        Optional<FRDomesticPaymentSubmission> isPaymentSubmission = paymentSubmissionRepository.findById(
                domesticPaymentId);
        if (!isPaymentSubmission.isPresent()) {
            return ResponseEntity.status(BAD_REQUEST)
                                 .body("Payment submission '" + domesticPaymentId + "' can't be found");
        }

        FRDomesticPaymentSubmission frPaymentSubmission = isPaymentSubmission.get();
        logger.debug("Found The Domestic Scheduled Payment '{}' to get details.", domesticPaymentId);

        OBVersion apiVersion = VersionPathExtractor.getVersionFromPath(request);
        if (!ResourceVersionValidator.isAccessToResourceAllowed(apiVersion, frPaymentSubmission.getObVersion())) {
            return PaymentApiResponseUtil.resourceConflictResponse(frPaymentSubmission, apiVersion);
        }

        return ResponseEntity.ok(responseEntityDetails(frPaymentSubmission));
    }

    private OBWriteDomesticResponse5 responseEntity(
            DomesticPaymentConsent consent,
            FRDomesticPaymentSubmission frPaymentSubmission
    ) {
        FRWriteDataDomestic data = frPaymentSubmission.getPayment().getData();

        final Optional<FRResponseDataRefund> refundAccountData = refundAccountService.getDomesticPaymentRefundData(
                consent.getRequestObj().getData().getReadRefundAccount(), consent);

        return new OBWriteDomesticResponse5()
                .data(new OBWriteDomesticResponse5Data()
                              .domesticPaymentId(frPaymentSubmission.getId())
                              .charges(toOBWriteDomesticConsentResponse5DataCharges(consent.getCharges()))
                              .initiation(toOBWriteDomestic2DataInitiation(data.getInitiation()))
                              .creationDateTime(new DateTime(frPaymentSubmission.getCreated().getTime()))
                              .statusUpdateDateTime(new DateTime(frPaymentSubmission.getUpdated().getTime()))
                              .status(toOBWriteDomesticResponse5DataStatus(frPaymentSubmission.getStatus()))
                              .consentId(data.getConsentId())
                              .debtor(toOBCashAccountDebtor4(data.getInitiation().getDebtorAccount()))
                              .refund(refundAccountData.map(FRResponseDataRefundConverter::toOBWriteDomesticResponse5DataRefund)
                                                       .orElse(null)))
                .links(LinksHelper.createDomesticPaymentLink(this.getClass(), frPaymentSubmission.getId()))
                .meta(new Meta());
    }

    private OBWritePaymentDetailsResponse1 responseEntityDetails(FRDomesticPaymentSubmission frPaymentSubmission) {
        return new OBWritePaymentDetailsResponse1()
                .data(
                        new OBWritePaymentDetailsResponse1Data()
                                .addPaymentStatusItem(
                                        new OBWritePaymentDetails1()
                                                .status(FRPaymentDetailsStatusConverter.toOBPaymentDetailsStatus(
                                                        frPaymentSubmission.getStatus().getValue()))
                                                .paymentTransactionId(UUID.randomUUID().toString())
                                                .statusUpdateDateTime(new DateTime(frPaymentSubmission.getUpdated()))
                                                .statusDetail(
                                                        new OBWritePaymentDetails1StatusDetail()
                                                                .localInstrument(
                                                                        frPaymentSubmission.getPayment()
                                                                                           .getData()
                                                                                           .getInitiation()
                                                                                           .getLocalInstrument()
                                                                )
                                                                .status(FRPaymentDetailsStatusConverter.toOBWritePaymentDetails1StatusDetailStatus(
                                                                        frPaymentSubmission.getStatus().getValue()))
                                                                .statusReason(OBWritePaymentDetails1PaymentStatusStatus.PDNG.getValue())
                                                                .statusReasonDescription(
                                                                        OBWritePaymentDetails1PaymentStatusStatus.PDNG.getValue())
                                                )
                                )

                )
                .links(LinksHelper.createDomesticPaymentDetailsLink(this.getClass(), frPaymentSubmission.getId()))
                .meta(new Meta());
    }

}
